import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";
import { Types, AptosClient, AptosAccount, CoinClient } from "aptos";

const client = new AptosClient("https://fullnode.testnet.aptoslabs.com/v1");
const coinClient = new CoinClient(client);

const Home: NextPage = () => {
  const [account, setAccount] = useState<Types.AccountData | null>(null);
  const [address, setAddress] = useState<string | null>(null);
  const [balance, setBalance] = useState<number | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);
  const [modules, setModules] = useState<Types.MoveModuleBytecode[]>([]);

  const handleWalletConnect = async () => {
    const status = await (window as any).aptos.isConnected();
    const result = await (window as any).aptos.connect();
    console.log(result);
    setAddress(result.address);
    const chainId = await client.getChainId();
    console.log(chainId);
    setChainId(chainId);
    const modules = await client.getAccountModules(result.address);
    console.log(modules);
    setModules(modules);
    return result;

    // @note check for is connected or not
    // if (status == false) {
    //   const result = await (window as any).aptos.connect();
    //   console.log(result);
    //   setAddress(result.address);
    //   return result;
    // }
    // console.log(status);
    // return status;
  };

  const handleWalletDisconnect = async () => {
    const status = await (window as any).aptos.isConnected();
    status ? (window as any).aptos.disconnect() : null;
    setAddress(null);
    console.log("disconnected");
  };

  // set address in state storage
  // useEffect(() => {
  //   window.aptos.account().then((data : {address: string}) => setAddress(data.address));
  //   }, []);

  // get account data
  useEffect(() => {
    if (!address) {
      setAccount(null);
      return;
    }
    client.getAccount(address).then(setAccount);
  
    // coinClient.checkBalance(new AptosAccount(address)).then(setBalance);
  }, [address]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {address == null ? (
          <button onClick={handleWalletConnect}>connect wallet</button>
        ) : (
          <button onClick={handleWalletDisconnect}>disconnect wallet</button>
        )}

        <p className={styles.description}>
          Your address is <code className={styles.code}>{address}</code>
        </p>
        <p className={styles.description}>
          Your sequence number is{" "}
          <code className={styles.code}>{account?.sequence_number}</code>
        </p>
        <p className={styles.description}>
          Your balance is <code className={styles.code}>{balance}</code>
        </p>
        <p className={styles.description}>
          The Chain ID is <code className={styles.code}>{chainId}</code>
        </p>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
